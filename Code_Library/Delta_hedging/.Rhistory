f <- function(z) 1/z  # the complex function
P <- c(-2-1i, 2-1i)   # straight line between two points
require(pracma)
cintegral(f, P)
install.packages("pracma")
f <- function(z) 1/z  # the complex function
P <- c(-2-1i, 2-1i)   # straight line between two points
require(pracma)
cintegral(f, P)
f <- function(z) 1/z  # the complex function
P <- c(-2-1i, 2-1i)   # straight line between two points
require(pracma)
cintegral(f, P)
library(pracma)
cintegral(f, P)
install.packages("elliptic")
elliptic::myintegrate(f, lower = 2-1iInf, uppwer = 2+1iInf)
elliptic::myintegrate(f, lower = 2-1i, uppwer = 2+1i)
elliptic::myintegrate(f, lower = 2-1i, upper = 2+1i)
elliptic::myintegrate(f, lower = 2-1i, upper = 2+5i)
elliptic::myintegrate(f, lower = 2-1i, upper = 1+5i)
elliptic::myintegrate(f, lower = -2-1i, upper = 1+10i)
# Sources -----------------------------------------------------------------
source("Code_Library/functions.R")
load("Code_Library/SP500_2003_cleaned_n_sync.Rdata")
load("NIG_Call_Prices_100000.Rdata")
library(elliptic)
# Variance optimal hedging ------------------------------------------------
variance_optimal_hedge <- function(C_0, S, expir_T, K, delta, kappa, sigma, theta, time_grid){
##helpfuns setup
NIG_cum_gen_func <- function(z, delta, kappa, sigma, theta){
delta * (1/kappa - 1/kappa * sqrt(1 - z^2*sigma^2*kappa - 2*theta*z*kappa))
}
gamma_z <- function(z, delta, kappa, sigma, theta){
(NIG_cum_gen_func(z+1, delta, kappa, sigma, theta) - NIG_cum_gen_func(z, delta, kappa, sigma, theta) - NIG_cum_gen_func(1, delta, kappa, sigma, theta)) /
(NIG_cum_gen_func(2, delta, kappa, sigma, theta) - 2*NIG_cum_gen_func(1, delta, kappa, sigma, theta))
}
eta_z <-  function(z, delta, kappa, sigma, theta){
NIG_cum_gen_func(z, delta, kappa, sigma, theta) - NIG_cum_gen_func(1, delta, kappa, sigma, theta)*gamma_z(z, delta, kappa, sigma, theta)
}
lambda <-  NIG_cum_gen_func(1, delta, kappa, sigma, theta)/(NIG_cum_gen_func(2, delta, kappa, sigma, theta) - 2* NIG_cum_gen_func(1, delta, kappa, sigma, theta))
call_option_measure <- function(z, K){
(1/(2*pi*1i)) * ((K^(1-z))/(z*(z-1)))
}
H_integrand <- function(z, S, t, K, expir_T, delta, kappa, sigma, theta, time_grid){
S[t]^(z) * exp(eta_z(z, delta, kappa, sigma, theta)*(expir_T-time_grid[t])) * call_option_measure(z, K)
}
xi_integrand <- function(z, S, t, K, expir_T, delta, kappa, sigma, theta, time_grid){
S[t-1]^(z-1) * gamma_z(z, delta, kappa, sigma, theta) *
exp(eta_z(z, delta, kappa, sigma, theta)*(expir_T-time_grid[t])) * call_option_measure(z, K)
}
##Initial portfolio def
H <- data.frame(H = rep(NA, (expir_T*(1/delta))))
xi <- data.frame(xi = rep(NA, (expir_T*(1/delta))))
phi <- data.frame(phi = rep(NA, (expir_T*(1/delta))))
G <- data.frame(G = rep(0, (expir_T*(1/delta)))) #Setting 0 for sum function
V <- data.frame(V = rep(NA, (expir_T*(1/delta))))
H[1,1] <-  integrate(function(z) Re(H_integrand(z = (2 + 1i*z), S = S, t = 1, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)),
lower = -Inf, upper = Inf, subdivisions = 1000)$value +
1i*integrate(function(z) Im(H_integrand(z = (2 + 1i*z), S = S, t = 1, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)) ,
lower = -Inf, upper = Inf, subdivisions = 1000)$value
V[1,1] <- H[1,1]
G[1,1] <- 0
for(t in 2:(expir_T*(1/delta))){
H[t,1] <- integrate(function(z) Re(H_integrand(z = (2 + 1i*z), S = S, t = t, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)),
lower = -Inf, upper = Inf, subdivisions = 1000)$value +
1i*integrate(function(z) Im(H_integrand(z = (2 + 1i*z), S = S, t = t, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)) ,
lower = -Inf, upper = Inf, subdivisions = 1000)$value
xi[t,1] <- integrate(function(z) Re(xi_integrand(z = (2 + 1i*z), S = S, t = t, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)),
lower = -Inf, upper = Inf, subdivisions = 1000)$value +
1i*integrate(function(z) Im(xi_integrand(z = (2 + 1i*z), S = S, t = t, expir_T = expir_T, K = K, delta = delta,
kappa = kappa, sigma = sigma, theta = theta, time_grid = time_grid)),
lower = -Inf, upper = Inf, subdivisions = 1000)$value
phi[t,1] <- xi[t,1] + (lambda/S[t-1]) * (H[t-1,1] - V[1,1] - G[t-1,1])
G[t,1] <- G[t-1,1] + phi[t,1]*(S[t]-S[t-1])
cat(paste("\r", t, "    ", round((t/(expir_T*(1/delta) - 1))*100), "%"))
}
return_list <- list(
phi = phi,
cum_gain = G
)
return(return_list)
}
# Parameters --------------------------------------------------------------
Price_seq <- SP500_2003_cleaned_n_synced %>% filter(as.Date(Date) >= as.Date("2003-12-01"),
as.Date(Date) < as.Date("2003-12-20")) %>%
.$Price
Datetime_seq <- SP500_2003_cleaned_n_synced %>% filter(as.Date(Date) >= as.Date("2003-12-01"),
as.Date(Date) < as.Date("2003-12-20")) %>%
.$Date
delta <- 1/60
expir_T <-  length(Price_seq) * delta
h <- -7.075284
K <- 106.51
S_0 <- 106.51
time_grid <- seq(0, expir_T, delta)[-1]
variance_optimal_hedge_result <- variance_optimal_hedge(
C_0 = NIG_Call_Prices[1], S = Price_seq, expir_T = expir_T, K = K,
delta = delta, kappa = 0.02861229, sigma = 0.004269415, theta = 0.0001198537, time_grid = time_grid)
